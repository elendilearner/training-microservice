apiVersion: apps/v1  # Defines the version of the Kubernetes API to use. Here, "apps" is the API group, and "v1" is the version within that group. The API group is a way to extend Kubernetes, and "apps" is a commonly used group for deploying applications. The group/version allows Kubernetes to evolve and support new features, maintaining backward compatibility.
kind: Deployment    # Defines the kind of resource, in this case, a Deployment
metadata:
  name: training-microservice-deployment  # Names the Deployment resource
  labels:
    name: training-microservice  # Adds a label to the Deployment for organization and selection
spec:
  replicas: 2  # Specifies the desired number of pod instances
  selector:
    matchLabels:
      name: training-microservice  # Defines how the Deployment finds which Pods to manage.
  strategy:
    rollingUpdate:
      maxSurge: 1  # The maximum number of Pods that can be created over the desired number of Pods.
      maxUnavailable: 1  # The maximum number of Pods that can be unavailable during the update.
    type: RollingUpdate  # The type of deployment update strategy
  template:
    metadata:
      labels:
        name: training-microservice  # Labels the Pods created by this Deployment
    spec:
      containers:
        - image: elendilearner/microservice-test:v2  # Specifies the image to be used for the Pod
          name: training-microservice-container  # Names the Container in the Pod
          resources:
            requests:
              cpu: "100m"  # The amount of CPU allocated to this container. 100m = 0.1 Core
              memory: "200Mi"  # The amount of RAM allocated to this container. Mi = Mebibytes
            limits:
              cpu: "500m"  # The maximum amount of CPU this container can use. 500m = 0.5 Core
              memory: "500Mi"  # The maximum amount of RAM this container can use.
          livenessProbe:
            httpGet:
              path: /health  # The path to be probed for checking the liveness of the application
              port: 8000  # The port number to be used for livenessProbe
            initialDelaySeconds: 60  # Number of seconds after the container has started before liveness probes are initiated
            timeoutSeconds: 10  # Number of seconds after which the probe times out.
          readinessProbe:
            httpGet:
              path: /health  # The path to be probed for checking the readiness of the application
              port: 8000  # The port number to be used for readinessProbe
            initialDelaySeconds: 60  # Number of seconds after the container has started before readiness probes are initiated
            timeoutSeconds: 10  # Number of seconds after which the probe times out.
          env:
            - name: MICROSERVICE_PORT  # Defines an environment variable for the container
              value: "8000"  # Assigns a value to the environment variable
          ports:
            - containerPort: 8000  # The port number that this container should listen on.
          imagePullPolicy: Always  # Always pull the image, ensuring the latest version is running
      restartPolicy: Always  # Restart the container if it exits or fails
